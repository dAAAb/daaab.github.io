{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","address","setAddress","isQuizActive","setQuizActive","useEffect","window","ethereum","bloctoProvider","enable","then","addresses","alert","sendReward","console","log","fetch","method","headers","body","JSON","stringify","response","json","catch","error","className","src","logo","alt","onClick","isActive","questions","fromJS","fields","question","correctAnswer","otherAnswers","onClose","onSuccess","messages","confirmQuitQuiz","claimReward","congrats","congratsDescription","submit","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,yNCiH5BC,MA3Gf,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACNC,EADM,KACGC,EADH,OAEyBF,oBAAS,GAFlC,mBAENG,EAFM,KAEQC,EAFR,KAIbC,qBAAU,WAEHC,OAAOC,UAAaD,OAAOE,eAMhCF,OAAOC,SACJE,SACAC,MAAK,SAAAC,GAAS,OAAIT,EAAWS,EAAU,OAPxCC,MAAM,oCAQP,IAEH,IAAMC,EAAa,WACjBC,QAAQC,IAAI,eACZC,MACE,sCACA,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBpB,cAGHS,MAAK,SAAAY,GAAQ,OAAIA,EAASC,UAC1Bb,MAAK,SAAAa,GAAI,OAAIX,MAAMQ,KAAKC,UAAUE,OAClCC,OAAM,SAAAC,GAAK,OAAIb,MAAMQ,KAAKC,UAAUI,QAWzC,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,6CACiB,6BACf,0BAAMH,UAAU,eAAezB,GAAW,SAE3CA,GAAW,4BACVyB,UAAU,WACVI,QAASjB,GAFC,cAMXZ,GAAW,4BACVyB,UAAU,WACVI,QAxBU,kBAAM1B,GAAc,KAsBpB,gCAOZ,yBAAKsB,UAAU,YACb,kBAAC,IAAD,CACEK,SAAU5B,EACV6B,UAAWC,YAAO,CAChB,CACEC,OAAQ,CACNC,SAAU,kDACVC,cAAe,OACfC,aAAc,CACZ,MACA,OACA,UAIN,CACEH,OAAQ,CACNC,SAAU,mBACVC,cAAe,SACfC,aAAc,CACZ,YACA,UACA,gBAKRC,QAvDO,kBAAMlC,GAAc,IAwD3BmC,UAtDW,WACnBnC,GAAc,GACdS,KAqDQ2B,SAAU,CACRC,gBAAiB,iCACjBC,YAAa,eACbC,SAAU,kBACVC,oBAAqB,mEACrBC,OAAQ,gBC5FFC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLX,QAAQW,MAAMA,EAAMmC,c","file":"static/js/main.984751b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport { fromJS } from 'immutable';\nimport Quiz from '@portto/quiz';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [address, setAddress] = useState(null)\n  const [isQuizActive, setQuizActive] = useState(false)\n\n  useEffect(() => {\n    // Check if user is using Blocto\n    if (!window.ethereum || !window.bloctoProvider) {\n      alert('This page only works in Blocto')\n\n      return;\n    }\n\n    window.ethereum\n      .enable()\n      .then(addresses => setAddress(addresses[0]))\n  }, [])\n\n  const sendReward = () => {\n    console.log('send reward');\n    fetch(\n      'http://165.22.101.212:3001/api/send',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address,\n        })\n      })\n      .then(response => response.json())\n      .then(json => alert(JSON.stringify(json)))\n      .catch(error => alert(JSON.stringify(error)));\n  }\n\n  const startQuiz = () => setQuizActive(true)\n  const stopQuiz = () => setQuizActive(false)\n\n  const completeQuiz = () => {\n    setQuizActive(false);\n    sendReward();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Blocto address:<br />\n          <span className=\"App-address\">{address || 'none'}</span>\n        </p>\n        {address && <button\n          className=\"App-link\"\n          onClick={sendReward}\n        >\n          Get Reward\n        </button>}\n        {address && <button\n          className=\"App-link\"\n          onClick={startQuiz}\n        >\n          Complete Quiz and Get Reward\n        </button>}\n\n        <div className=\"App-quiz\">\n          <Quiz\n            isActive={isQuizActive}\n            questions={fromJS([\n              {\n                fields: {\n                  question: 'Which stable coin has the largest market share?',\n                  correctAnswer: 'USDT',\n                  otherAnswers: [\n                    'DAI',\n                    'USDC',\n                    'TUSD'\n                  ]\n                }\n              },\n              {\n                fields: {\n                  question: 'Who made Blocto?',\n                  correctAnswer: 'portto',\n                  otherAnswers: [\n                    'ConsenSys',\n                    'Binance',\n                    'Coinbase'\n                  ]\n                }\n              }\n            ])}\n            onClose={stopQuiz}\n            onSuccess={completeQuiz}\n            messages={{\n              confirmQuitQuiz: 'Are you sure you want to quit?',\n              claimReward: 'Claim Reward',\n              congrats: 'Congratulations',\n              congratsDescription: 'This puny quiz is no match for you.<br />Claim your rewards now.',\n              submit: 'Submit',\n            }}\n          />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}